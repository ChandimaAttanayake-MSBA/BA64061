# -*- coding: utf-8 -*-
"""AML A02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9O_6ejQCExv7F7ACeDEGKWMYBlVTFRs
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import pandas as pd
import os

# Set the dataset path
base_dir = "/content/drive/MyDrive/Colab Notebooks/Cat and Dogs/cats_vs_dogs_small"

# Data Augmentation and Preprocessing
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    os.path.join(base_dir, "train"),
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

validation_generator = val_test_datagen.flow_from_directory(
    os.path.join(base_dir, "validation"),
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

test_generator = val_test_datagen.flow_from_directory(
    os.path.join(base_dir, "test"),
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Define CNN Model from Scratch
model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=100,
    epochs=20,
    validation_data=validation_generator,
    validation_steps=50
)

# Evaluate performance
test_loss, test_acc = model.evaluate(test_generator)
print(f"CNN from Scratch - Test Accuracy: {test_acc:.4f}")

# Transfer Learning with Pretrained Model
base_model = keras.applications.VGG16(weights='imagenet', include_top=False, input_shape=(150, 150, 3))
base_model.trainable = False

model_tl = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid')
])

model_tl.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(learning_rate=0.0001), metrics=['accuracy'])

history_tl = model_tl.fit(
    train_generator,
    steps_per_epoch=100,
    epochs=10,
    validation_data=validation_generator,
    validation_steps=50
)

# Evaluate pretrained model
test_loss_tl, test_acc_tl = model_tl.evaluate(test_generator)
print(f"Pretrained VGG16 - Test Accuracy: {test_acc_tl:.4f}")

# Compare results
results = pd.DataFrame({
    'Model': ['CNN from Scratch', 'Pretrained VGG16'],
    'Test Accuracy': [test_acc, test_acc_tl]
})

print(results)

# Plot accuracy comparison
plt.figure(figsize=(8,5))
plt.bar(results['Model'], results['Test Accuracy'], color=['blue', 'green'])
plt.xlabel("Model")
plt.ylabel("Test Accuracy")
plt.title("Model Performance Comparison")
plt.show()